<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="62">
            <Title>Updated Documents (Unsorted)</Title>
        </Document>
        <Document ID="55">
            <Title>Appendices</Title>
            <Synopsis>- Keyboard shortcuts quick reference
- Programming keywords</Synopsis>
        </Document>
        <Document ID="40">
            <Title>Philosophy</Title>
            <Synopsis>- Discuss what drives the development of iCanScript.</Synopsis>
            <Text>iCanScript was created to help and improve the design process for creating software.  It is meant to extend the standard text editor for writing Unity scripts.  It offers a visual workflow to build, review, and publish programming logic without removing the ability to write low-level logic using standard toolsets.
iCanScript roots its philosophy in that at one point, the software to be created uses concepts that are better expressed in terms of high-level building blocks including multi-level state charts.
Number crushing is best expressed using low-level software and textual source code editors, high-level concepts are better expressed using visual design elements.  Often, corporations include a formal or informal development process to discuss and publish the high-level concepts pertaining the software product to be developed.   In all cases, these high-level concepts are expressed using diagrams as it is the simplest and most direct way of building and iterating on those fundamental aspects of the product.</Text>
            <Notes>This is a note from Index Card.</Notes>
        </Document>
        <Document ID="63">
            <Title>Many Thanks</Title>
            <Synopsis>We, at Disruptive Software, would like to start by saying: 
— Thank You for your interest in iCanScript !!!         
Their is nothing more exciting for software designers like us than growing our customer base and we will make every effort to help you become one of our users.
— The Software Development Team at Disruptive Software.</Synopsis>
            <Text>We, at Disruptive Software, would like to start by saying: 
— Thank You for your interest in iCanScript !!!                 
Their is nothing more exciting for software designers like us than growing our customer base and we will make every effort to help you become one of our users.
— The Software Development Team at Disruptive Software.</Text>
        </Document>
        <Document ID="56">
            <Title>What is iCanScript</Title>
            <Synopsis>- Discuss how iCanScript can help in the programming experience.</Synopsis>
            <Text>iCanScript is a visual scripting editor for the Unity game engine.</Text>
        </Document>
        <Document ID="49">
            <Title>Visual Editor</Title>
        </Document>
        <Document ID="64">
            <Title>Preferences</Title>
        </Document>
        <Document ID="27">
            <Title>Ideas</Title>
        </Document>
        <Document ID="12">
            <Title>Non-Fiction Format</Title>
            <Text>NON-FICTION WITH SUB-HEADS

About This Template
When compiled (File > Compile), this project will generate a document in standard manuscript format with sub-headings inside the chapters.

How To Use This Template
	•	Edit the Title Page document to ensure it contains the correct information.
	•	Create a new folder for each chapter and title each folder with the name of the chapter. If you don’t intend to use chapter names, just use something descriptive that tells you what the chapter is about. (You do not need to title the folders “Chapter One” and so on, as chapter numbering will be taken care of automatically during the Compile process.) The first chapter folder has been created for you with the placeholder title “Chapter Subtitle”.
	•	Create a new text document for each sub-section within the chapter folders, giving each the title of the subheading you wish to appear in the text. You can nest text documents for smaller subheadings, like this:
	#
	•	If you don’t require a foreword, move the “Foreword” document to the Trash folder. Alternatively, rename it “Preface” or “Introduction” if you prefer. If you would rather the foreword come after the table of contents - as is sometimes the case - drag the “Foreword” document and drop it below the “Contents” document.
	•	Before compiling, to create your table of contents, simply select all documents you wish to be included in the contents listing (usually this will be the “Foreword”, all chapter folders, and “Endnotes”, but not the nested sub-sections), then go to Edit > Copy Special > Copy Documents as ToC. Then paste into the “Contents” document (use Edit > Paste and Match Style to paste without the dotted underline between the chapter names and page numbers). The resulting linked text and page number tags will be replaced with the final chapter names and page numbers in the compiled document. You don’t need to do this every time you compile, just when chapters have been added, deleted, renamed or moved around. (Note to Microsoft Word users: If you export to Word, you may need to generate a print preview in Word to force the page numbers to show up correctly - they may appear as question marks before doing so.)
	•	If you have no footnotes or endnotes in your text, be sure to delete the “Endnotes” document.
	•	“Notes” and “Ideas” folders have been provided for your convenience, although you can replace them or create different top-level folders for your research materials if necessary (these are just regular folders that have had custom icons assigned to them using the Documents > Change Icon feature.)
	•	Compile your manuscript into standard manuscript format by selecting File > Compile.

Tables and Figures
If you need to use tables or figures in your manuscript, you can refer to them using the following tags, replacing “KEYWORD” with a unique word that identifies your table or figure.

!fig(KEYWORD)
!table(KEYWORD)

For instance, consider the following text, which makes use of such tags.

Table !table(sales): Sales 2011
Table !table(dates): Shipment dates
Figure !fig(skeleton): The skeleton of the gnu.
Figure !fig(malcolmreynolds): The second coolest character in Firefly.

… (For sales figures, see table !table(sales))… For shipment dates, see table !table(dates)… where he discovered the skeleton of a gnarled gnu (see figure !fig(skeleton))… Chronicles providing a similar role, albeit without the Castle actor (see figure !fig(malcolmreynolds)).

In the compiled document, the above text would look like this:

Table 1: Sales 2011
Table 2: Shipment dates
Figure 1: The skeleton of the gnu.
Figure 2: The second coolest character in Firefly.

… (For sales figures, see table 1)… For shipment dates, see table 2… where he discovered the skeleton of a gnarled gnu (see figure 1)… Chronicles providing a similar role, albeit without the Castle actor (see figure 2).

Making Changes
There are various minor changes you can make to the settings to tweak this template so that it better suits your needs, as follows:
	•	Chapter subtitles: If you don’t want to include the names of your chapter folders below the chapter numbering text in the compiled document, go to the “Formatting” pane in the Compile sheet and deselect “Title” in the list of elements to include. You will also need to edit the title prefix in the “Level Settings”.
	•	Hierarchical numbering: If you require hierarchical numbering for sub-sections, choose “Non-Fiction with Sub-Heads (Hierarchical)” from the “Format As” menu in Compile. (If this format isn’t in the list, choose “Manage…” at the bottom of the “Format As” menu and tick “Non-Fiction with Sub-Heads (Hierarchical)” in the panel that appears, then click “OK”. It will then be available in the “Format As” menu.) Alternatively, edit the “Level Settings” for each level in the “Formatting” pane of Compile and add the “&lt;$hn>” (for “hierarchical numbering”) tag to the title prefixes. 
	•	Page header: You can edit the page header in the “Page Settings” pane of the Compile sheet.
	•	Font: To quickly change the font used throughout the compiled document, use “Quick Font Override” in Compile. To change the font size of the various sub-headings, use the “Formatting” pane.

Sample Document
See the “Sample MS” PDF file in the Research folder for an example of a document that has been created using this template. This is what the “Draft” folder structure looked like in the binder for this sample document:

￼

Final Note
Scrivener project templates are flexible and are not intended to restrict you to a particular workflow. You can change, delete or move the files and folders contained in the template, and you can create your own templates by setting up a skeletal project with the files, folders and settings you would like to use for new projects and using File > Save As Template.</Text>
        </Document>
        <Document ID="42">
            <Title>Terms and Conventions</Title>
            <Synopsis>- Provide a simplified list of important terms.

- Discuss typographic conventions used in this manual.</Synopsis>
        </Document>
        <Document ID="57">
            <Title>iCanScript Anatomy</Title>
            <Text>iCanScript is composed of:
	* a central visual editor window;
	* a library tree panel;
	* a hierarchy tree panel;
	* an object instance wizard panel; and
	* a preference configuration panel.
All of these windows and panels can be opened from Unity's Windows menu under the sub-menu iCanScript.
Currently, the layout of iCanScript windows and panels are left to the user.</Text>
        </Document>
        <Document ID="65">
            <Title>Executing Your Visual Scripts</Title>
            <Text>iCanScript autonomously generates the visual script code when you request to run your game.  No special user intervention is required.
</Text>
        </Document>
        <Document ID="58">
            <Title>Menus and Keyboard Shortcuts</Title>
        </Document>
        <Document ID="50">
            <Title>Unity Inspector</Title>
        </Document>
        <Document ID="43">
            <Title>What's New</Title>
            <Synopsis>- Discuss major difference with previous version of the manual.</Synopsis>
            <Text>iCanScript Release Candidate #1 (RC#1) is the first officially supported release of iCanScript.  It includes the following features:</Text>
        </Document>
        <Document ID="66">
            <Title>Saving &amp; Loading Your Visual Scripts</Title>
            <Text>Your visual scripts are automatically saved and reloaded as part of the game object in which they reside.  Your iCanScript components may be in one of two configurations: either as part of a GameObject in a Scene or as part of a Prefab in the Project.  In both cases, the iCanScript component will be saved and reload by Unity in the standard way.
Here are the considerations for saving &amp; reloading iCanScript components:
iCanScript in a GameObject:
This implies that if the visual script is a component of a game object in a scene, that scene must be saved as it is necessary for any other type of change in the scene.
iCanScript in a Prefab:
Visual script components that are included in  prefabs are automatically saved as part of the parent prefab.</Text>
        </Document>
        <Document ID="59">
            <Title>Programming Keywords</Title>
        </Document>
        <Document ID="51">
            <Title>Library</Title>
        </Document>
        <Document ID="44">
            <Title>Installation and Upgrades</Title>
            <Text>iCanScript is delivered in three Unity packages:
- iCanScript: the core editor &amp; engine (mandatory);
- iCanScript_Nodes: base library nodes (optional);
- iCanScript_Examples: example projects (optional).</Text>
        </Document>
        <Document ID="37">
            <Title>Acknowledgements</Title>
            <Synopsis>- Thanks to all the donors.</Synopsis>
            <Text>Many thanks to the following people for very kindly donating time and knowledge in creating iCanScript:
Manual Rochon - helped in user interface design as well as the overall operational concepts.  Manual was also a key validator on the Windows platform.

</Text>
        </Document>
        <Document ID="67">
            <Title>Tips and Tricks and Trouble</Title>
        </Document>
        <Document ID="52">
            <Title>Instance Wizard</Title>
        </Document>
        <Document ID="45">
            <Title>Overview</Title>
            <Text>iCanScript is a visual programming editor that can be used standalone or to complement existing source code text editors.</Text>
        </Document>
        <Document ID="38">
            <Title>Introduction</Title>
            <Synopsis>- Discuss the purpose of this manual.</Synopsis>
            <Text>Welcome to the User Manual of iCanScript.  The following sections will get you acquainted with the user interface and the </Text>
        </Document>
        <Document ID="68">
            <Title>Preferences</Title>
        </Document>
        <Document ID="60">
            <Title>Preface</Title>
            <Text>iCanScript is a concept that has evolved over the last 15 years of my professional software engineering life.
In 1997, the core concepts of the engine sub-system were first designed and implemented for a large telecommunication corporation.  The resulting software engine was embedded in several large scale products in the years to follow.
Having joined the gaming industry in 2003, I have realized that the software engine needed to be complemented by a visual editor to boost the productivity in designing software.  The rationale for the visual editor is to ease the understanding of software implementations to a broader audience.  Consequently, the visual editor enables novice and experience programmers to be more productive.
The visual editor focuses and is efficient for mid-to-high-level software design aspects.  Though the visual editor can be used for the design of low-level software, it is not its main forte and can, in many occasions, be superseded by source code editors for such work.  The iCanScript product focus establishes the fundamental requirement that its visual editor must embed into the existing software development pipeline in which the standard source code editor remains a key element.
In 2010, I have decided to dedicate myself to the design and implementation of the iCanScript product, helping experienced and less experienced software designers realize their ideas with greater ease without forcing them to depart from their existing workflow.

#

Michel Launier,
Lead Engineer &amp; Founder of Disruptive Software,
Disruptive Software</Text>
        </Document>
        <Document ID="53">
            <Title>Hierarchy</Title>
        </Document>
        <Document ID="46">
            <Title>Interface Overview</Title>
        </Document>
        <Document ID="54">
            <Title>Extending iCanScript</Title>
            <Synopsis>- iCanScript for senior programmers</Synopsis>
        </Document>
    </Documents>
</SearchIndexes>