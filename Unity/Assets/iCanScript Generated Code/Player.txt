using UnityEngine;

namespace iCanScript.Engine.GeneratedCode {

    [iCS_Class(Library="Visual Scripts")]
    public class Player : MonoBehaviour {
        // =========================================================================
        // PRIVATE FIELDS
        // -------------------------------------------------------------------------
        private  iCS_ImpulseForceGenerator p_jumpConfig=  new iCS_ImpulseForceGenerator(null, null, null, null, null, null);
        private  iCS_DesiredVelocityForceGenerator p_roamingConfig=  new iCS_DesiredVelocityForceGenerator(null, null, new Vector3(1f, 0f, 1f));
        private  iCS_ForceIntegrator p_forceIntegrator=  new iCS_ForceIntegrator(null, 1f, 0.995f);


        // =========================================================================
        // PUBLIC FUNCTIONS
        // -------------------------------------------------------------------------

        [iCS_Function]
        public  void Update(GameObject aGameObject, Transform aTransform) {
            Vector2 theRawAnalog1;
            bool theJump;
            bool theB2;
            bool theB3;
            var theAnalog1= iCS_GameController.GameController(out theRawAnalog1, out theJump, out theB2, out theB3, maxSpeed);
            float theX;
            float theY;
            iCS_FromTo.FromVector(theAnalog1, out theX, out theY);
            var theVelocity= iCS_FromTo.ToVector(theX, 0f, theY);
            var theAcceleration= p_jumpConfig.Update_38(theJump);
            p_forceIntegrator.Acceleration1= theAcceleration;
            var theOutput= aGameObject.GetComponent("CharacterController");
            var theVelocity_101= theOutput.velocity;
            var theAcceleration_60= p_roamingConfig.Update_56(theVelocity, theVelocity_101, accelerationScale.Update);
            p_forceIntegrator.Acceleration2= theAcceleration_60;
            Vector3 theDisplacement;
            p_forceIntegrator.Integrate(theVelocity_101, out theDisplacement);
            theOutput.Move(theDisplacement);
            var theMagnitude= theVelocity_101.magnitude;
            var theOutput_138= iCS_Math.NormalizedCross(theVelocity_101, Vector3.down);
            var theValueTimesDt= iCS_TimeUtility.ScaleByDeltaTime(theMagnitude);
            var theOutput_130= iCS_Math.Mul(theValueTimesDt, 114.59f);
            aTransform.Rotate(theOutput_138, theOutput_130, relativeTo.Rotate);
        }
    }

}
